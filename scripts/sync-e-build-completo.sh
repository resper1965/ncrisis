#!/bin/bash

# Aborta o script se qualquer comando falhar
set -e

# Navega para o diret√≥rio da aplica√ß√£o
cd /opt/ncrisis

echo ">>> VERIFICANDO ALTERA√á√ïES LOCAIS..."
if ! git diff --quiet || ! git diff --cached --quiet; then
  echo "‚ùå ERRO: Existem altera√ß√µes n√£o commitadas. Resolva antes de continuar."
  exit 1
fi
echo "‚úÖ Reposit√≥rio limpo."

echo -e "\n>>> SINCRONIZANDO COM O GITHUB..."
git pull || { echo "‚ùå ERRO: Falha no git pull."; exit 1; }
echo "‚úÖ Sincronizado com sucesso."

echo -e "\n>>> INSTALANDO DEPEND√äNCIAS DO BACKEND..."
npm install
echo "‚úÖ Depend√™ncias do backend instaladas."

# O build do backend √© feito pelo Dockerfile, ent√£o n√£o √© necess√°rio aqui.

echo -e "\n>>> INSTALANDO E BUILDANDO FRONTEND..."
cd frontend
npm install
npm run build
cd ..
echo "‚úÖ Frontend pronto."

echo -e "\n>>> REINICIANDO AMBIENTE DOCKER..."
docker compose down
docker compose up -d --build --force-recreate
echo "‚úÖ Containers Docker recriados e no ar."

echo -e "\n\n--- DIAGN√ìSTICO FINAL ---"
echo -e "\n‚úÖ COMMIT ATUAL:"
git log -1 --pretty=format:"%h - %s (%cr)"

echo -e "\n‚úÖ CONTAINERS ATIVOS:"
docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"

echo -e "\n‚úÖ LOGS DO BACKEND (√∫ltimas 20 linhas):"
# Adiciona uma pequena pausa para o container estabilizar
sleep 10
docker compose logs --tail=20 app

echo -e "\n‚úÖ TESTE DE SA√öDE DO BACKEND (localhost:8000/health):"
curl -f http://localhost:8000/health || echo -e "\n‚ùå AVISO: Backend n√£o respondeu ao teste de sa√∫de."

echo -e "\n\nüöÄ PROCESSO CONCLU√çDO!" 