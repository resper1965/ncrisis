

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: ncrisis-postgres
    environment:
      POSTGRES_DB: ncrisis_db
      POSTGRES_USER: ncrisis_user
      POSTGRES_PASSWORD: ncrisis_pass
      POSTGRES_HOST_AUTH_METHOD: md5
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - ncrisis-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ncrisis_user -d ncrisis_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis (for future caching/queues)
  redis:
    image: redis:7-alpine
    container_name: ncrisis-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ncrisis-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # N.Crisis Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ncrisis-app
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://ncrisis_user:ncrisis_pass@postgres:5432/ncrisis_db
      - REDIS_URL=redis://redis:6379
      - PORT=8000
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ncrisis-network
    restart: unless-stopped
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
  redis_data:

networks:
  ncrisis-network:
    driver: bridge