generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model File {
  id           Int         @id @default(autoincrement())
  filename     String
  originalName String?
  zipSource    String?
  mimeType     String?
  size         Int?
  uploadedAt   DateTime    @default(now())
  processedAt  DateTime?
  sessionId    String?
  totalFiles   Int?
  sourceId     Int?
  detections   Detection[]
  source       Source?     @relation(fields: [sourceId], references: [id])

  @@map("files")
}

model Detection {
  id               Int      @id @default(autoincrement())
  titular          String
  documento        String
  valor            String
  arquivo          String
  timestamp        DateTime @default(now())
  fileId           Int
  context          String   @default("")
  position         Int      @default(0)
  riskLevel        String   @default("medium")
  sensitivityScore Int      @default(5)
  aiConfidence     Float    @default(0.5)
  reasoning        String?
  contextualRisk   String?
  isFalsePositive  Boolean  @default(false)
  recommendations  String[] @default([])
  file             File     @relation(fields: [fileId], references: [id], onDelete: Cascade)

  @@map("detections")
}

model Pattern {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  pattern     String
  type        String
  description String?
  isActive    Boolean  @default(true)
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("patterns")
}

model Source {
  id                  Int       @id @default(autoincrement())
  type                String
  name                String
  path                String?
  isActive            Boolean   @default(true)
  cronPattern         String?
  filePatterns        String[]  @default([])
  processSubdirs      Boolean   @default(true)
  lastScan            DateTime?
  totalFilesProcessed Int       @default(0)
  totalDetections     Int       @default(0)
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  files               File[]

  @@map("sources")
}

model Organization {
  id        String     @id @default(uuid())
  name      String
  incidents Incident[]

  @@map("organizations")
}

model User {
  id        String     @id @default(uuid())
  name      String
  email     String     @unique
  incidents Incident[] @relation("Assignee")

  @@map("users")
}

model Incident {
  id                String       @id @default(uuid())
  organizationId    String
  date              DateTime
  type              String
  description       String
  attachments       String[]     @default([])
  assigneeId        String?
  semanticContext   String?
  lgpdArticles      String[]     @default([])
  dataCategories    String[]     @default([])
  numSubjects       Int?
  riskLevel         String?
  immediateMeasures String?
  actionPlan        String?
  isDraft           Boolean      @default(false)
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  assignee          User?        @relation("Assignee", fields: [assigneeId], references: [id])
  organization      Organization @relation(fields: [organizationId], references: [id])

  @@map("incidents")
}

model TextEmbedding {
  id        Int      @id @default(autoincrement())
  text      String
  vector    Float[]
  hash      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("text_embeddings")
}
